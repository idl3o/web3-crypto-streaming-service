name: Sona Streaming Integration

on:
  push:
    branches: [main]
    paths:
      - 'src/services/Sona**'
      - 'src/components/sona/**'
  pull_request:
    branches: [main]
    paths:
      - 'src/services/Sona**'
      - 'src/components/sona/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run tests against'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

jobs:
  test-sona-services:
    runs-on: ubuntu-latest
    env:
      NODE_ENV: test
      SONA_API_ENDPOINT: ${{ secrets.SONA_API_ENDPOINT }}
      SONA_API_KEY: ${{ secrets.SONA_API_KEY }}
      
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Lint Sona services
        run: npx eslint src/services/Sona* src/components/sona/
      
      - name: Run Sona service tests
        run: npm run test -- --testPathPattern="src/services/.*Sona.*|src/components/sona"
      
      - name: Validate token handling
        run: |
          node ./scripts/validate-token-flow.js
          
  integration-tests:
    runs-on: ubuntu-latest
    needs: test-sona-services
    env:
      USE_MOCK_SONA: true
      
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Start mock Sona backend
        run: npm run start:mock-sona-server &
        
      - name: Wait for server
        run: npx wait-on http://localhost:3030/health -t 30000
      
      - name: Run Sona integration tests
        run: npm run test:integration -- --grep="Sona"
      
      - name: Generate test coverage report
        run: npm run coverage
        
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/
          
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [test-sona-services, integration-tests]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
        
      - name: Configure Sona environment
        run: |
          echo "REACT_APP_SONA_API_ENDPOINT=${{ secrets.SONA_API_ENDPOINT }}" >> .env
          echo "REACT_APP_SONA_AUTH_ENABLED=true" >> .env
          
      - name: Deploy to environment
        run: |
          if [[ "${{ github.event.inputs.environment || 'dev' }}" == "prod" ]]; then
            npm run deploy:production
          elif [[ "${{ github.event.inputs.environment || 'dev' }}" == "staging" ]]; then
            npm run deploy:staging
          else
            npm run deploy:dev
          fi
